var documenterSearchIndex = {"docs":
[{"location":"api/setup/#Setup","page":"Setup","title":"Setup","text":"","category":"section"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"CryoGrid.jl can be installed via the Julia package manager:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"add https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"or equivalently in code/REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"import Pkg\nPkg.add([\"https://gitlab.awi.de/sparcs/cryogrid/cryogridjulia\"])","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Be aware that CryoGrid.jl is a relatively large package with quite a few dependencies, so installation into a blank Julia environment could take several minutes.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"It is recommended that you work with CryoGrid.jl as a Julia package rather than cloning the repository and hacking on it directly. This will allow for more rapid development and minimize latency from precompile time. It is also recommended to create a dedicated Julia environment in your workspace to better manage package dependencies. This can be accomplished by running:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"activate .","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"in your working directory, or by starting Julia with the --project=. option. Then, you can proceed to install CryoGrid.jl into the environment via the commands above.","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"You can load CryoGrid.jl in your Julia REPL or editor by running:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using CryoGrid","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"or similarly:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"import CryoGrid","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"The latter option will bring only the CryoGrid module name into scope rather than all of its exported components.","category":"page"},{"location":"api/seb/#Surface-Energy-Balance","page":"Surface Energy Balance","title":"Surface Energy Balance","text":"","category":"section"},{"location":"api/seb/","page":"Surface Energy Balance","title":"Surface Energy Balance","text":"Modules = [CryoGrid.SEB]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/seb/#CryoGrid.Processes.SEB.SurfaceEnergyBalance-Tuple{Top, Soil, Heat, Any, Any}","page":"Surface Energy Balance","title":"CryoGrid.Processes.SEB.SurfaceEnergyBalance","text":"Top interaction, ground heat flux from surface energy balance. (no snow, no water body, no infiltration)\n\n\n\n\n\n","category":"method"},{"location":"api/callbacks/#Callbacks","page":"Callbacks","title":"Callbacks","text":"","category":"section"},{"location":"api/callbacks/","page":"Callbacks","title":"Callbacks","text":"Modules = [CryoGrid.Callbacks]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/callbacks/#CryoGrid.Callbacks.CryoGridCallbackFunction","page":"Callbacks","title":"CryoGrid.Callbacks.CryoGridCallbackFunction","text":"CryoGridCallbackFunction{TState,TSetup}(setup, state)\n\nHelper type for defining callbacks on CryoGrid models. Given a CryoGridSetup and some additional user-defined state type TState, the user can provide dispatches for CryoGridCallbackFunction{TState} that satisfy the relevant DifferentialEquations.jl callback function signature. For example:\n\nstruct MyState\n    # some state variables\n    ...\nend\nfunction (fn::CryoGridCallbackFunction{MyState})(u,p,t)\n    ...\nend\nfunction MyCallback(setup::CryoGridSetup)\n    state = MyState(...)\n    fn = CryoGridCallbackFunction(setup, state)\n    # create and return SciML callback here\nend\n\n\n\n\n\n","category":"type"},{"location":"api/utils/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utils/","page":"Utilities","title":"Utilities","text":"Modules = [CryoGrid.Utils]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/utils/#CryoGrid.Utils.Params","page":"Utilities","title":"CryoGrid.Utils.Params","text":"Base type for composite parameter types. Permits iteration of struct fields.\n\n\n\n\n\n","category":"type"},{"location":"api/utils/#CryoGrid.Utils.convert_tspan-Tuple{Tuple{DateTime, DateTime}}","page":"Utilities","title":"CryoGrid.Utils.convert_tspan","text":"convert_tspan(tspan::Tuple{DateTime,DateTime})\nconvert_tspan(tspan::Tuple{Float64,Float64})\n\nConvenience method for converting between Dates.DateTime and solver time.\n\n\n\n\n\n","category":"method"},{"location":"api/utils/#CryoGrid.Utils.dustrip-Tuple{Number}","page":"Utilities","title":"CryoGrid.Utils.dustrip","text":"Debug ustrip. Remove units if and only if debug mode is NOT enabled.\n\n\n\n\n\n","category":"method"},{"location":"api/utils/#CryoGrid.Utils.structiterate-Tuple{A} where A","page":"Utilities","title":"CryoGrid.Utils.structiterate","text":"Provides implementation of Base.iterate for structs.\n\n\n\n\n\n","category":"method"},{"location":"api/utils/#CryoGrid.Utils.@Float_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@Float_str","text":"Similar to @UT_str but produces a Float64 quantity type for the given unit if and only if debug mode is enabled. If debug mode is not enabled, plain Float64 is used instead.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@Number_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@Number_str","text":"Similar to @UT_str but produces a Float64 quantity type for the given unit if and only if debug mode is enabled. If debug mode is not enabled, plain Number is used instead.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@Real_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@Real_str","text":"Similar to @UT_str but produces a Float64 quantity type for the given unit if and only if debug mode is enabled. If debug mode is not enabled, plain Real is used instead.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@UFloat_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@UFloat_str","text":"Similar to Unitful.@u_str (i.e. u\"kg\") but produces the type of the quantity rather than the instance. NOT conditional on debug mode.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@UT_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@UT_str","text":"Similar to Unitful.@u_str (i.e. u\"kg\") but produces the type of the unit rather than the instance. NOT conditional on debug mode.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@setscalar-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@setscalar","text":"Convenience macro for setting scalar (single-element) arrays/vectors. It turns an expression of the form:     a.b = ... into     a.b[1] = ...\n\nThis is primarily intended for code clarity, i.e to clearly discern scalar and non-scalar values.\n\n\n\n\n\n","category":"macro"},{"location":"api/utils/#CryoGrid.Utils.@xu_str-Tuple{Any}","page":"Utilities","title":"CryoGrid.Utils.@xu_str","text":"Similar to Unitful.@u_str (i.e. u\"kg\") but conditional on debug mode being enabled. Otherwise, no unit is applied. This should be used to apply units (and thus dimensional analysis checks) to physical quantities at test time but not during normal execution to avoid unnecessary overhead.\n\n\n\n\n\n","category":"macro"},{"location":"api/#Index-of-public-API","page":"Index","title":"Index of public API","text":"","category":"section"},{"location":"api/","page":"Index","title":"Index","text":"","category":"page"},{"location":"api/numerics/#Numerics","page":"Numerics","title":"Numerics","text":"","category":"section"},{"location":"api/numerics/","page":"Numerics","title":"Numerics","text":"DocTestSetup = quote\n    using CryoGrid\nend","category":"page"},{"location":"api/numerics/","page":"Numerics","title":"Numerics","text":"Modules = [CryoGrid.Numerics]\nPrivate = true\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/numerics/#CryoGrid.Numerics.Grid","page":"Numerics","title":"CryoGrid.Numerics.Grid","text":"struct Grid{S,G,A,Q} <: AbstractVector{Q}\n\nRepresents the 1D spatial discretization on which time integration is performed. S is a GridSpec, either Edges or Cells (always edges upon initial construction). The grid representation can be converted (allocation free) between grid edges and cells via the cells and edges methods. G represents the geometry/volume on which the vertical 1D discretization is applied. A is the underlying array type, and Q is the numerical type (e.g. Float64 or a Unitful.Quantity).\n\n\n\n\n\n","category":"type"},{"location":"api/numerics/#CryoGrid.Numerics.Profile-Union{Tuple{Vararg{Pair{Q, Tuple{Vararg{T, N}}}, N1} where N1}, Tuple{Q}, Tuple{N}, Tuple{T}} where {T, N, Q<:(Quantity{T, 𝐋, U} where {T, U<:(Unitful.FreeUnits{N, 𝐋, nothing} where N)})}","page":"Numerics","title":"CryoGrid.Numerics.Profile","text":"Profile(pairs...;names)\n\nConstructs a Profile from the given pairs Q => (x1,...,xn) where x1...xn are the values defined at Q. Column names for the resulting DimArray can be set via the names parameter which accepts an NTuple of symbols, where N must match the number of parameters given (i.e. n).\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.finitediff!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T}","page":"Numerics","title":"CryoGrid.Numerics.finitediff!","text":"finitediff!(∂x::AbstractVector, x::AbstractVector, Δ::AbstractVector)\n\nFirst order forward finite difference operator.\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.heaviside-Tuple{Any}","page":"Numerics","title":"CryoGrid.Numerics.heaviside","text":"heaviside(x)\n\nDifferentiable implementation of heaviside step function, i.e:\n\nh(x) = begincases 1  x  0  0  x  0 endcases\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.interpolateprofile!-Tuple{DimArray, Any}","page":"Numerics","title":"CryoGrid.Numerics.interpolateprofile!","text":"interpolateprofile(profile::Profile, state; interp=Linear())\n\nInterpolates the given profile to the corresponding variable grids. Assumes state to be indexable via the corresponding variable symbol and that the parameter names in state and profile match.\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.lineardiffusion!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, Number}","page":"Numerics","title":"CryoGrid.Numerics.lineardiffusion!","text":"lineardiffusion!(∂y::AbstractVector, x::AbstractVector, Δ::AbstractVector, k::Number)\n\nSecond order Laplacian with constant diffusion k.\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.logistic-Tuple{Any}","page":"Numerics","title":"CryoGrid.Numerics.logistic","text":"logistic(x)\n\nNumerically stable logistic function.\n\nσ(x) = begincases frac11+exp(-x)  x  0  fracexp(x)1+exp(x)  x  0 endcases\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.logit-Tuple{Any}","page":"Numerics","title":"CryoGrid.Numerics.logit","text":"logit(x)\n\nNumerically stable logit function. True domain is (0,1) but inputs are clamped to (ϵ,1-ϵ) for numerical convenience, making the effective domain (-∞,∞).\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.nonlineardiffusion!-NTuple{5, AbstractVector{Float64}}","page":"Numerics","title":"CryoGrid.Numerics.nonlineardiffusion!","text":"nonlineardiffusion!(\n    ∂y::AbstractVector{Float64},\n    x::AbstractVector{Float64}, \n    Δx::AbstractVector{Float64},\n    k::AbstractVector{Float64},\n    Δk::AbstractVector{Float64}\n)\n\nSecond order Laplacian with non-linear diffusion function, k. Accelerated using LoopVectorization.@turbo for Float64 vectors.\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.nonlineardiffusion!-Tuple{AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractVector{T} where T, AbstractArray}","page":"Numerics","title":"CryoGrid.Numerics.nonlineardiffusion!","text":"nonlineardiffusion!(∂y::AbstractVector, x::AbstractVector, Δx::AbstractVector, k::AbstractVector, Δk::AbstractArray)\n\nSecond order Laplacian with non-linear diffusion function, k.\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.softplus-Tuple{Any}","page":"Numerics","title":"CryoGrid.Numerics.softplus","text":"softplus(x)\n\nNumerically stable softplus function.\n\ns(x) = log(1+exp(-x)) + max(xϵ)\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.softplusinv-Tuple{Any}","page":"Numerics","title":"CryoGrid.Numerics.softplusinv","text":"softplusinv(x)\n\nNumerically stable softplus inverse function. True domain is (0,∞) but inputs are clamped to (ϵ,∞) for numerical convenience, making the effective domain (-∞,∞).\n\n\n\n\n\n","category":"method"},{"location":"api/numerics/#CryoGrid.Numerics.∇-Tuple{Any, Symbol}","page":"Numerics","title":"CryoGrid.Numerics.∇","text":"∇(f, dvar::Symbol)\n\nAutomatically generates an analytical partial derivative of f w.r.t dvar using Symbolics.jl. To avoid symbolic tracing issues, the function should 1) be pure (no side effects or non-mathematical behavior) and 2) avoid indeterminate control flow such as if-else or while blocks (technically should work but sometimes doesn't...). Conditional logic can be included using IfElse.ifelse. Additional argument names are extracted automatically from the method signature of f. Keyword arg choosefn should be a function which selects from available methods of f (returned by methods); defaults to first. Note that ∇ uses RuntimeGeneratedFunction to produce a fully specialized and compiled Julia function; it may be slow on the first call (due to compilation), but should be just as fast as handwriting it on subsequent calls.\n\nExample:\n\nFor f(xy) = 2x + xy, fracpartial fpartial x = 2 + y. Using ∇, we can obtain this automagically:\n\nf(x,y) = 2*x + x*y\n∇f_x = ∇(f,:x)\n∇f_x(2.0,3.0)\n\n# output\n\n5.0\n\n\n\n\n\n","category":"method"},{"location":"api/forcings/#Forcings","page":"Forcings","title":"Forcings","text":"","category":"section"},{"location":"api/forcings/","page":"Forcings","title":"Forcings","text":"Modules = [CryoGrid.Forcings]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/forcings/#CryoGrid.Forcings.Forcing","page":"Forcings","title":"CryoGrid.Forcings.Forcing","text":"  Forcing{T,N}\n\n\n\n\n\n","category":"type"},{"location":"api/forcings/#CryoGrid.Forcings.TimeSeriesForcing","page":"Forcings","title":"CryoGrid.Forcings.TimeSeriesForcing","text":"  TimeSeriesForcing{T,A,I}\n\n\n\n\n\n","category":"type"},{"location":"api/forcings/#CryoGrid.Forcings.TimeSeriesForcing-Tuple{Number}","page":"Forcings","title":"CryoGrid.Forcings.TimeSeriesForcing","text":"Get interpolated forcing value at t seconds from t0.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"api/interface/","page":"Interface","title":"Interface","text":"Modules = [CryoGrid.Interface]\nPrivate = false\nOrder = [:type, :constant, :function, :macro]","category":"page"},{"location":"api/interface/#CryoGrid.Interface.Bottom","page":"Interface","title":"CryoGrid.Interface.Bottom","text":"Bottom <: Layer\n\nGeneric \"bottom\" layer that marks the lower boundary of the subsurface grid.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.BoundaryProcess","page":"Interface","title":"CryoGrid.Interface.BoundaryProcess","text":"BoundaryProcess{P<:SubSurfaceProcess}\n\nAbstract base type for boundary processes, i.e. processes that operate at the boundaries of the subsurface. A BoundaryProcess represents the boundary conditions of one or more SubSurfaceProcesses but may include its own diagnostic (or even prognostic) variables, if necessary. The type of P indicates which SubSurfaceProcess is forced by the BoundaryProcess and may be a Union{...} type if the BoundaryProcess provides boundary conditions to multiple SubSurfaceProcesses.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.BoundaryStyle","page":"Interface","title":"CryoGrid.Interface.BoundaryStyle","text":"Trait that specifies the \"style\" or kind of boundary condition. This can be used to write generic implementations of interact! that are (relatively) agnostic to specific implementations of BoundaryProcess. A good example of this can be found in HeatConduction.boundaryflux.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.BoundaryStyle-Union{Tuple{Type{T}}, Tuple{T}} where T<:BoundaryProcess","page":"Interface","title":"CryoGrid.Interface.BoundaryStyle","text":"BoundaryStyle(::Type{T})\n\nCan be overriden by BoundaryProcess types to indicate the type of boundary condition, e.g:\n\nBoundaryStyle(::Type{BP}) = Dirichlet()\n\nwhere BP is a BoundaryProcess that provides the boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.Coupled","page":"Interface","title":"CryoGrid.Interface.Coupled","text":"Coupled{P1,P2} = System{Tuple{T1,T2}} where {T1,T2}\n\nRepresents a coupled pair of explicitly processes. Alias for System{Tuple{P1,P2}}. Coupled provides a simple mechanism for defining new behaviors on composite processes/systems.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Coupled-Union{Tuple{P2}, Tuple{P1}, Tuple{P1, P2}} where {P1<:Process, P2<:Process}","page":"Interface","title":"CryoGrid.Interface.Coupled","text":"Coupled(p1,p2)\n\nAlias for System(p1,p2).\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.Dirichlet","page":"Interface","title":"CryoGrid.Interface.Dirichlet","text":"BoundaryStyle instance for Dirichlet boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Layer","page":"Interface","title":"CryoGrid.Interface.Layer","text":"Abstract base type for all layers.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Neumann","page":"Interface","title":"CryoGrid.Interface.Neumann","text":"BoundaryStyle instance for Neumann boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Process","page":"Interface","title":"CryoGrid.Interface.Process","text":"Abstract base type for all dynamical processes.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.SubSurface","page":"Interface","title":"CryoGrid.Interface.SubSurface","text":"SubSurface <: Layer\n\nAbstract base type for layers in the stratigraphy, e.g. soil, snow, pond, etc.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.SubSurfaceProcess","page":"Interface","title":"CryoGrid.Interface.SubSurfaceProcess","text":"SubSurfaceProcess <: Process\n\nAbstract base type for subsurface processes, i.e. processes that operate at or below the surface, such as heat conduction, water infiltration, etc.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.System","page":"Interface","title":"CryoGrid.Interface.System","text":"System{TProcs} <: Process\n\nRepresents a explicitly or implicitly coupled system of processes. TProcs is always a Tuple of other processes.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Top","page":"Interface","title":"CryoGrid.Interface.Top","text":"Top <: Layer\n\nGeneric \"top\" layer that marks the upper boundary of the subsurface grid.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.Boundary","page":"Interface","title":"CryoGrid.Interface.Boundary","text":"Boundary = Union{Top,Bottom}\n\nAlias that refers to the type union over both Top and Bottom layer types.\n\n\n\n\n\n","category":"type"},{"location":"api/interface/#CryoGrid.Interface.diagnosticstep!-Tuple{Layer, Process, Any}","page":"Interface","title":"CryoGrid.Interface.diagnosticstep!","text":"diagnosticstep!(l::Layer, p::Process, state)\n\nDefines the diagnostic update for a Process on a given Layer.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.initialcondition!-Tuple{Layer, Any}","page":"Interface","title":"CryoGrid.Interface.initialcondition!","text":"initialcondition!(::Layer, state)\n\nDefines the initial condition for a given Layer. initialcondition! should write initial values into all relevant state variables in state.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.initialcondition!-Tuple{Layer, Process, Any}","page":"Interface","title":"CryoGrid.Interface.initialcondition!","text":"initialcondition!(::Layer, ::Process, state)\n\nDefines the initial condition for a given Process on Layer. initialcondition! should write initial values into all relevant state variables in state.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.initialcondition!-Tuple{Layer, Process, Layer, Process, Any, Any}","page":"Interface","title":"CryoGrid.Interface.initialcondition!","text":"initialcondition!(::Layer, ::Process, ::Layer, ::Process, state1, state2)\n\nDefines the initial condition for two Processes on adjacent layers. initialcondition! should write initial values into all relevant state variables in state.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.interact!-Tuple{Layer, Process, Layer, Process, Any, Any}","page":"Interface","title":"CryoGrid.Interface.interact!","text":"interact!(::Layer, ::Process, ::Layer, ::Process, state1, state2)\n\nDefines a boundary interaction between two processes on adjacent layers.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.prognosticstep!-Tuple{Layer, Process, Any}","page":"Interface","title":"CryoGrid.Interface.prognosticstep!","text":"prognosticstep!(l::Layer, p::Process, state)\n\nDefines the prognostic update for a Process on a given layer. Note that an instance of prognosticstep! must be provided for all non-boundary (subsurface) processes/layers.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.variables-Tuple{Layer, Process}","page":"Interface","title":"CryoGrid.Interface.variables","text":"variables(::Layer, ::Process)\n\nDefines variables for a given Process on Layer. Implementations should return a Tuple of CryoGrid.Common.Vars.\n\n\n\n\n\n","category":"method"},{"location":"api/interface/#CryoGrid.Interface.variables-Tuple{Layer}","page":"Interface","title":"CryoGrid.Interface.variables","text":"variables(::Layer)\n\nDefines variables for a given Layer type. Implementations should return a Tuple of CryoGrid.Common.Vars.\n\n\n\n\n\n","category":"method"},{"location":"manual/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"manual/overview/#Setting-up-a-model","page":"Overview","title":"Setting up a model","text":"","category":"section"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"At the highest level, a model in CryoGrid.jl is defined by a Grid and a Stratigraphy, constructed top-down from individual StratNodes, each of which consists of a Layer and one or more Processes. Each node in the Stratigraphy is assigned a depth, which then aligns it with the Grid. All models must consist of at least three layers/nodes: Top and Bottom layers with corresponding boundary conditions, as well as one or more SubSurface layers. Here we define a simple three-layer model (or one-layer, exlcuding the boundaries) with a single sub-surface process, i.e. Heat (heat conduction):","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"# ... load forcings, set up profiles, etc.\n# see examples/heat_vgfc_seb_saoylov_custom.jl for more details\nstrat = Stratigraphy(\n    -2.0u\"m\" => Top(SurfaceEnergyBalance(Tair,pr,q,wind,Lin,Sin,z)),\n    0.0u\"m\" => Ground(:soil, Soil(soilprofile), Heat{:H}(tempprofile, freezecurve=SFCC(VanGenuchten()))),\n    1000.0u\"m\" => Bottom(GeothermalHeatFlux(0.053u\"J/s/m^2\"))\n);\ngrid = CryoGrid.Models.DefaultGrid_5cm\nmodel = CryoGridSetup(strat,grid);","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"This model can then be used to construct an ODEProblem (from DiffEqBase.jl) via the CryoGridProblem constructor:","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"tspan = (DateTime(2010,10,30),DateTime(2011,10,30))\nprob = CryoGridProblem(model,tspan) # produces an ODEProblem with problem type CryoGridODEProblem","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"It can then be solved simply using the solve function (also from DiffEqBase and OrdinaryDiffEq):","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"# solve with forward Euler (fixed 5 minute time steps) and construct CryoGridOutput from solution\nout = @time solve(prob, Euler(), dt=5*60.0, saveat=24*3600.0, progress=true) |> CryoGridOutput;","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"The result is a CryoGridOutput type which provides access to DimArrays containing the model outputs over time and space:","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"julia> out.soil.T\n278×366 DimArray{Float64,2} with dimensions: \n  Z: Quantity{Float64, 𝐋, Unitful.FreeUnits{(m,), 𝐋, nothing}}[0.01 m, 0.03 m, …, 850.0 m, 950.0 m] Sampled: Ordered Irregular Points,\n  Ti (Time): DateTime[2010-10-30T00:00:00, …, 2011-10-30T00:00:00] Sampled: Ordered Irregular Points","category":"page"},{"location":"manual/overview/#Defining-model-behavior","page":"Overview","title":"Defining model behavior","text":"","category":"section"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"Notice that, in the example above, it is types such as Soil, Heat, SFCC, etc. that specify which components the model should use. These components are defined by adding method dispatches to the functions defined in the Interface module. State variables are declared via the variables method, e.g:","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"\"\"\" Variable definitions for heat conduction (enthalpy) on soil layer. \"\"\"\nvariables(soil::Soil, heat::Heat{:H}) = (\n    Prognostic(:H, Float\"J/m^3\", OnGrid(Cells)),\n    Diagnostic(:T, Float\"K\", OnGrid(Cells)),\n    Diagnostic(:C, Float\"J//K*/m^3\", OnGrid(Cells)),\n    Diagnostic(:Ceff, Float\"J/K/m^3\", OnGrid(Cells)),\n    Diagnostic(:k, Float\"W/m/K\", OnGrid(Edges)),\n    Diagnostic(:kc, Float\"W//m/K\", OnGrid(Cells)),\n    # this last line just appends any state variables or parameters\n    # defined by the freeze curve to the tuple.\n    variables(soil, heat, freezecurve(heat))...,\n)","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"When the Heat process is assigned to a Soil layer, CryoGridSetup will invoke this method and create state variables corresponding to each Var. Prognostic variables are assigned derivatives (in this case, dH, since H is the prognostic state variable) and integrated over time. Diagnostic variables provide in-place caches for intermediary variables/computations and are automatically tracked by the modeling engine (i.e. their saved values will appear in CryoGridOutput).","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"Each variable definition consists of a name (a Julia Symbol), a type, and a shape. For variables discretized on the grid, the shape is specified by OnGrid, which will generate an array of the appropriate size when the model is compiled. The arguments Cells and Edges specify whether the variable should be defined on the grid cells or edges respecitvely.","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"The real work finally happens in diagnosticstep! and prognosticstep!, the latter of which should be used to compute the time derivatives (here dH). interact! defines the behavior at the boundaries and should be used to compute the derivatives (and any other necessary values) at the interface between layers.","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"We can take as an example the implementation of prognosticstep! for enthalpy-based heat conduction:","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"\"\"\" Prognostic step for heat conduction (enthalpy) on soil layer. \"\"\"\nfunction prognosticstep!(::Soil, ::Heat{:H}, state)\n    Δk = Δ(state.grids.k) # cell sizes\n    ΔT = Δ(state.grids.T)\n    # Diffusion on non-boundary cells\n    heatconduction!(state.dH,state.T,ΔT,state.k,Δk)\nend","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"warning: Warning\nPrognostic state variables like H in the example above should not be directly modified in user code. This is especially crucial when using higher order or implicit integrators as unexpected changes to the underlying state may destroy the accuracy of their internal interpolators. For modleing discontinuities, use Callbacks instead.","category":"page"},{"location":"manual/overview/","page":"Overview","title":"Overview","text":"Note that state is a NamedTuple with fields corresponding to the variables declared by the variables function for Soil and Heat. Additionally, output arrays for the time derivatives are provided (here dH), as well as the current timestep, layer upper boundary depth, parameters, and variable grids (accessible via state.t, state.z, state.params, and state.grids respectively). Note that state will also contain other variables declared on this Soil layer by other SubSurfaceProcesses, allowing for implicit coupling between processes where appropriate.","category":"page"},{"location":"api/heat_conduction/#Heat-conduction","page":"Heat Conduction","title":"Heat conduction","text":"","category":"section"},{"location":"api/heat_conduction/","page":"Heat Conduction","title":"Heat Conduction","text":"Modules = [HeatConduction]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.FreeWater-Tuple{SubSurface, Heat{:H, F, S} where {F<:FreezeCurve, S}, Any}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.FreeWater","text":"Implementation of \"free water\" freeze curve for any subsurface layer. Assumes that 'state' contains at least temperature (T), enthalpy (H), heat capacity (C), total water content (θw), and liquid water content (θl).\n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.McKenzie","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.McKenzie","text":"McKenzie <: SFCCFunction\n\nMcKenzie JM, Voss CI, Siegel DI, 2007. Groundwater flow with energy transport and water-ice phase change:     numerical simulations, benchmarks, and application to freezing in peat bogs. Advances in Water Resources,     30(4): 966–983. DOI: 10.1016/j.advwatres.2006.08.008.\n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.SFCC","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.SFCC","text":"SFCC{F,∇F,S} <: FreezeCurve\n\nGeneric representation of the soil freeze characteristic curve. The shape and parameters of the curve are determined by the implementation of SFCCFunction f. Also requires an implementation of SFCCSolver which provides the solution to the non-linear mapping H <–> T.\n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.SFCC-2","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.SFCC","text":"SFCC(f::SFCCFunction, s::SFCCSolver=SFCCNewtonSolver())\n\nConvenience constructor for SFCC that automatically generates an analytical derivative of the given freeze curve function f using ModelingToolkit/Symbolics.jl. To avoid symbolic tracing issues, the function should 1) be pure (no side effects or non-mathematical behavior) and 2) avoid indeterminate control flow such as if-else or while blocks (technically should work but sometimes doesn't...). Conditional logic can be incorporated via IfElse.ifelse. See the documentation for Symbolics.jl for more information and technical details.\n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.SFCC-Tuple{Soil, Heat{:H, F, S} where {F<:FreezeCurve, S}, Any}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.SFCC","text":"Updates state variables according to the specified SFCC function and solver. For heat conduction with enthalpy, this is implemented as a simple passthrough to the non-linear solver. For heat conduction with temperature, we can simply evaluate the freeze curve to get C_eff, θl, and H.\n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.SFCCNewtonSolver","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.SFCCNewtonSolver","text":"Specialized implementation of Newton's method with backtracking line search for resolving the energy conservation law, H = TC + Lθ. Attempts to find the root of the corresponding temperature residual: ϵ = T - (H - Lθ(T)) / C(θ(T)) and uses backtracking to avoid jumping over the solution. This prevents convergence issues that arise due to discontinuities and non-monotonic behavior in most common soil freeze curves.\n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.VanGenuchten","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.VanGenuchten","text":"VanGenuchten <: SFCCFunction\n\nvan Genuchten MT, 1980. A closed-form equation for predicting the hydraulic conductivity of unsaturated soils.     Soil Science Society of America Journal, 44(5): 892–898. DOI: 10.2136/sssaj 1980.03615995004400050002x.\n\nDall'Amico M, 2010. Coupled water and heat transfer in permafrost modeling. Ph.D. Thesis, University of Trento, pp. 43.\n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.Westermann","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.Westermann","text":"Westermann <: SFCCFunction\n\nWestermann, S., Boike, J., Langer, M., Schuler, T. V., and Etzelmüller, B.: Modeling the impact of     wintertime rain events on the thermal regime of permafrost, The Cryosphere, 5, 945–959,     https://doi.org/10.5194/tc-5-945-2011, 2011. \n\n\n\n\n\n","category":"type"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.TempProfile-Tuple{Vararg{Pair{var\"#s97\", var\"#s96\"} where {var\"#s97\"<:(Quantity{T, 𝐋, U} where {T, U<:(Unitful.FreeUnits{N, 𝐋, nothing} where N)}), var\"#s96\"<:(Quantity{T, 𝚯, U} where {T, U<:(Unitful.FreeUnits{N, 𝚯, A} where {N, A})})}, N} where N}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.TempProfile","text":"Alias and constructor for Profile specific to temperature.\n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.boundaryflux-Union{Tuple{B}, Tuple{Boundary, B, SubSurface, Heat, Any, Any}} where B<:(BoundaryProcess{var\"#s110\"} where var\"#s110\"<:Heat)","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.boundaryflux","text":"boundaryflux(boundary::Boundary, bc::B, sub::SubSurface, h::Heat, sbound, ssub) where {B<:BoundaryProcess{Heat}}\n\nComputes the flux dH/dt at the given boundary. Calls boundaryflux(BoundaryStyle(B),...) to allow for generic implementations by boundary condition type.\n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.heatcapacity!-Tuple{Soil, Heat, Any}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.heatcapacity!","text":"Heat capacity for soil layer \n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.heatconduction!-NTuple{5, Any}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.heatconduction!","text":"heatconduction!(∂H,T,ΔT,k,Δk)\n\n1-D heat conduction/diffusion given T, k, and their deltas. Resulting enthalpy gradient is stored in ∂H. Note that this function does not perform bounds checking. It is up to the user to ensure that all variables are arrays of the correct length.\n\n\n\n\n\n","category":"method"},{"location":"api/heat_conduction/#CryoGrid.Processes.HeatConduction.thermalconductivity!-Tuple{Soil, Heat, Any}","page":"Heat Conduction","title":"CryoGrid.Processes.HeatConduction.thermalconductivity!","text":"Thermal conductivity for soil layer \n\n\n\n\n\n","category":"method"},{"location":"quickstart/#Quick-start","page":"Getting Started","title":"Quick start","text":"","category":"section"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"After installing CryoGrid.jl, you can get started right away with a simple soil heat model. The Models module (aliased CryoGridModels) provides pre-specified models that can be obtained with a single function call. It is also possible to modify the soil and initial temperature profiles via SoilLayerConfig; here SamoylovDefault is used.","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"using CryoGrid\nusing Plots\n\n# load provided forcing data from Samoylov;\n# The forcing file will be automatically downloaded to the input/ folder if not already present.\nforcings = loadforcings(CryoGridModels.Forcings.Samoylov_ERA_obs_fitted_1979_2014_spinup_extended_2044, :Tair => u\"°C\");\n# use air temperature (converted to Kelvin) as upper boundary forcing\ntair = TimeSeriesForcing(ustrip.(u\"K\", forcings.data.Tair), forcings.timestamps, :Tair);\n# basic 1-layer heat conduction model (defaults to free water freezing scheme)\nmodel = CryoGridModels.SoilHeat(TemperatureGradient(tair), CryoGridModels.SamoylovDefault)\n# define time span (1 year)\ntspan = (DateTime(2010,10,30),DateTime(2011,10,30))\n# CryoGrid front-end for ODEProblem\nprob = CryoGridProblem(model,tspan)\n# solve discretized system, saving every 6 hours;\n# Trapezoid on a discretized PDE is analogous to the well known Crank-Nicolson method.\nout = @time solve(prob, Trapezoid(), abstol=1e-3, reltol=1e-4, saveat=6*3600.0, progress=true) |> CryoGridOutput;\nzs = [1.0,5,10,20,30,50,100,500,1000]u\"cm\"\ncg = Plots.cgrad(:copper,rev=true)\nplot(out.soil.T[Z(Near(zs))], color=cg[LinRange(0.0,1.0,length(zs))]', ylabel=\"Temperature\", leg=false, dpi=150)","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"(Image: Ts_output_freew)","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"Alternatively, we can use a van Genuchten freeze curve:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"model = CryoGridModels.SoilHeat(TemperatureGradient(tair), SamoylovDefault, freezecurve=SFCC(VanGenuchten()))\n# Set-up parameters\np = copy(model.pproto)\np.soil.α .= 4.0\np.soil.n .= 2.0\np.soil.Tₘ .= 273.15\ntspan = (DateTime(2010,10,30),DateTime(2011,10,30))\nprob = CryoGridProblem(model,tspan,p)\n# stiff solvers don't work well with van Genuchten due to the ill-conditioned Jacobian;\n# We can just forward Euler instead.\nout = @time solve(prob, Euler(), dt=120.0, saveat=6*3600.0, progress=true) |> CryoGridOutput;\nplot(out.soil.T[Z(Near(zs))], color=cg[LinRange(0.0,1.0,length(zs))]', ylabel=\"Temperature\", leg=false, dpi=150)","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"(Image: Ts_output_vgfc)","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"Note that SoilHeat uses energy as the state variable by default. To use temperature as the state variable instead:","category":"page"},{"location":"quickstart/","page":"Getting Started","title":"Getting Started","text":"# Note that this will work with any freeze curve, here we use Westermann (2011).\n# :T is the variable name for temperature, :H represents enthalpy/energy.\n# This is used in the specification of the Heat process type.\nmodel = CryoGridModels.SoilHeat(:T, TemperatureGradient(tair), SamoylovDefault, freezecurve=SFCC(Westermann()))","category":"page"},{"location":"#CryoGrid.jl","page":"Home","title":"CryoGrid.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CryoGrid.jl is a Julia implementation of the CryoGrid land surface model using DifferentialEquations.jl and the SciML package ecosystem. Its primary goal is to provide a fast, flexible, and feature rich framework for modeling permafrost in Julia while simultaneously laying the groundwork for rapid prototyping of data-driven parameter estimation, uncertainty quantification, and causal analysis of complex Arctic land surface processes.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is part of the broader research project: Quantifying and explaining uncertainty in permafrost modeling under a warming climate","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"installation.md\",\"quickstart.md\",\"manual/overview.md\",\"api/index.md\"]","category":"page"},{"location":"api/models/","page":"Models","title":"Models","text":"Modules = [CryoGrid.Models]\nPrivate = false\nOrder = [:type, :function, :macro]","category":"page"}]
}
